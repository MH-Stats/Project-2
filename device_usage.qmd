---
title: "Mobile Device Usage"
execute:
  warning: false
format: html
editor: visual
editor_options: 
  chunk_output_type: inline
---

## Exploratory Data Analysis Of Mobile Device Usage Data

The purpose of this document is to use summary statistics and plots to better understand the mobile device usage data, then to use the knowledge to inform the creation of an app that allows users to explore the data themselves. To start this process the data has been downloaded from Kaggle.com and will be read in using functions from the tidyverse.

```{r}
# loading in relevant packages
library(tidyverse)

# reading in data
device_data <- read_csv("user_behavior_dataset.csv")
device_data
```

Now I am going to check it for NA values and rename columns so they are easier to use. Also why I am at I am going to make the categorical variables into factor variables as factors run better with a number of R functions.

```{r}
# Renaming columns
device_data <- device_data |> 
  rename(
    user = `User ID`, 
    device = `Device Model`,
    OS = `Operating System`,
    app_time = `App Usage Time (min/day)`, # Make sure to remember the time scales and other scales
    screen_time = `Screen On Time (hours/day)`,
    battery_drain = `Battery Drain (mAh/day)`,
    apps_installed = `Number of Apps Installed`,
    data_usage = `Data Usage (MB/day)`,
    age = Age,
    gender = Gender, 
    user_class = `User Behavior Class` 
  )

# Checking for NA data
sum_na <- function(col){
  sum(is.na(col))
}
device_data |>
  summarize(across(everything(), sum_na))

# Using function to make categorical variables into factors
factorizer <- function(data){
  valid_cat_vars <- c("device", "OS", "gender")
  

  # Creating labels for cat vars
  if("device" %in% colnames(data)){
    data <- data |>
      mutate(
        device = factor(device, 
                        levels = c("Google Pixel 5", "OnePlus 9", "Xiaomi Mi 11", "Samsung Galaxy S21", "iPhone 12"), 
                        labels = c("Google Pixel 5", "OnePlus 9", "Xiaomi Mi 11", "Samsung Galaxy S21", "iPhone 12"))
      )
  }
  if("OS" %in% colnames(data)){
    data <- data |>
      mutate(
        OS = factor(OS, 
                        levels = c("Android", "iOS"), 
                        labels = c("Android", "iOS"))
      )
  }
  if("gender" %in% colnames(data)){
    data <- data |>
      mutate(
        gender = factor(gender, 
                        levels = c("Male", "Female"), 
                        labels = c("Male", "Female"))
      )
  }
  return(data)
}
# running function on data
device_data <- factorizer(device_data)
```

### One-way and Two-way Contingency Tables

Now that our data is loaded in and in a more usable format, we can start making summary statistics by creating contingency tables of the categorical variables. To start we are going to create a function that allows us to quickly run through every categorical variable and make a one-way contingency table, after that we will do the same thing but use it to make two-way tables.

```{r}
# Creating One-way contingency table function
make1way <- function(data){
  valid_cat_var <- c("device", "OS", "gender") # Setting Vars to run 
  tables <- list()
    
  for (var in colnames(data)){
    if (var %in% valid_cat_var){
      tables[[var]] <- table(data[[var]])
    }
  }
  return(tables)
}

# Testing make1way
one_way_tables <- make1way(device_data) 
one_way_tables

# Creating two-way contingency table function
make2way <- function(data) {
  valid_cat_var <- c("device", "OS", "gender") 
  tables <- list() 

  for (var1 in valid_cat_var) {
    for (var2 in valid_cat_var) {
      if (var1 == var2) next
      
      if (var1 %in% colnames(data) && var2 %in% colnames(data)) {
          table_name <- paste(var1, var2, sep = "_")
           tables[[table_name]] <- table(data[[var1]], data[[var2]]) 
      }
    }
  }
  return(tables) 
} 

# Testing make2way\
two_way_tables <- make2way(device_data)
two_way_tables
```

### Numerical summaries for quantitative variables by categorical variable levels

The next step we are going to take is to make some numerical summaries for each numerical variable subsetted for each level of each categorical variable. This way we have can store a list of tibbles that we can later use in our app, that way a user can quickly access the numerical summaries they wish to explore.

```{r}
# Creating function to make summaries
 numeric_summarizer<- function(data){
  valid_cat_var <- c("device", "OS", "gender")
  valid_num_var <- names(select_if(data, is.numeric)) # Selecting all numeric variables
  valid_num_var <- valid_num_var[!valid_num_var %in% c("user", "user_class")] # Getting rid of unnecessary columns
  results <- list()
  
# Looping for cat and num vars
  for (cat_var in valid_cat_var){
    for (num_var in valid_num_var){
      
      if (cat_var %in% colnames(data) && num_var %in% colnames(data))
      summary_data <- data |>
      group_by(!!sym(cat_var)) |>
      summarize(across(num_var, .fns = list("mean" = mean, 
                                       "median" = median,
                                       "var" = var,
                                       "sd" = sd,
                                       "IQR" = IQR))) 
      
      # Storing results as a list with names
      results[[paste(cat_var, num_var, sep = "_")]] <- summary_data
    }
  }
  return(results)
 } 
# Saving results as a list
num_sums <- numeric_summarizer(device_data)

```

### Plots for Mobile Device Data

Now we are going to create 6 different plots that can be referenced by our users in App that we will be building. Specifically, I want to look at plots of screen time by age, screen time by gender, screen time by device, apps installed by age, apps installed by gender, and apps installed by screen time. By focusing on only two numerical variables we will be able to create a 

```{r, message = FALSE, fig.widith = 10, fig.height = 8}
# Loading in GGally
library(GGally)

# Creating scatter plot matrix of correlations between numeric variables using GGally (First not covered in class plot)
ggpairs(device_data,
  columns = c("app_time", "screen_time", "battery_drain", "apps_installed", "data_usage", "age"),
  title = "Numerical Variable Scatter Plot Matrix",
  upper = list(continuous = "cor"),
  proportions = 10
)

# Unloading GGally 
unloadNamespace("GGally")
```

```{r}
# subsetting data to create barplot of devices by gender
device_gender_bar <- device_data |>
  group_by(device, gender) |>
  summarize(count = n())
  
# creating plot
ggplot(device_gender_bar, aes(x = device, y = count, fill = gender)) +
       geom_bar(stat="identity") +
       xlab("Device") +
       ylab("Device Count") +
       ggtitle("Device By Gender") +
       scale_fill_discrete(name="Gender", labels=c("Male", "Female"))
```

```{r}
# boxplot of device by screen time
device_screen_boxplot <- ggplot(device_data, aes(x = device, y = screen_time)) +
  geom_boxplot(position = "identity") +
  ggtitle("Screen Time by Device") +
  xlab("Device")
  ylab("Screen Time (hours/day)")
```

```{r, fig.widith = 10, fig.height = 8}
# Creating scatterplot of apps installed by device subsetted by gender 
apps_by_device_scatter <- ggplot(device_data, aes(x = device, y = apps_installed, color = gender)) +
  geom_point(position = "jitter") +
  ggtitle("Scatterplot of Apps Installed by Device and gender") + 
  ylab("Apps Installed") +
  xlab("Device")

apps_by_device_scatter

# Adding facting to the plot
apps_by_device_scatter <- apps_by_device_scatter + geom_point() +
  facet_wrap(~ gender)
apps_by_device_scatter
```

Now I am going to load in ggridges so I can create ridgeline plots of battery drain by device. Additionally, I will make one final plot where I will be looking at a scatter plot of app time by apps installed colored by device.

```{r}
#loading in ggridges
library(ggridges)

# creating ridgeline plot of battery drain by device (second not covered in class plot)
drain_by_device_ridgeline <- ggplot(device_data, aes(x = battery_drain, y = device)) + 
                             geom_density_ridges() +
                             ggtitle("Ridgeline Plot of Battery Drain by Device") +
                             xlab("Battery Drain (mAh/day)") +
                             ylab("Device")
drain_by_device_ridgeline

# Subsetting data by devices
apptime_by_apps <- device_data |>
  group_by(device) |>
  summarize(count = n())

# Creating scatterplot
apptime_by_apps_plot <- ggplot(device_data, aes(x = apps_installed, y = app_time, color = device)) +
  geom_point(position = "jitter") +
  ggtitle("Scatterplot of App Usage Time by Apps Installed") + 
  ylab("App Usage Time (min/day)") +
  xlab("Apps Installed")
 
apptime_by_apps_plot
```

